Apache Web 服务器配置
PHP.INI 文件配置
PHP 配置文件 PHP.ini, 这个配置文件是影响到 PHP 的功能最直接的方式。

只是在这里检查: PHP.INI File Configuration

在 Mac OS X 安装 PHP

Mac 用户可以以二进制文件安装或源代码安装。事实上，你的 OS X 可能附带 Apache 和 PHP 预按装。这是可能是相当老的组件，它可能缺少许多不常见的扩展。

然而，如果你想要在您的便携式计算机上快速设置 Apache + PHP + MySQL/PostgreSQL，你只需要编辑你的 Apache 配置文件和打开 Web 服务器。

因此只需遵循以下步骤：

用文本编辑器打开 Apache 配置文件设为最高权限
    sudo open -a TextEdit /etc/httpd/httpd.conf
编辑文件，反注释以下行
    Load Module php5_module
    AddModule mod_php5.c
    AddType application/x-httpd-php .php
您可能还想要反注释 < Directory /home/*/Sites > 模块或告诉 Apache 服务的目录。
重新启动 Web 服务器
    sudo apachectl graceful
打开文本编辑器。类型： <? php phpinfo () ；? >。将此文件保存在 Web 服务器的根目录中并命名为 info.php。
启动 Web 浏览器和浏览这个文件. 但为正确生成文件必须始终使用 HTTP 请求 （http://www.testdomain.com/info.php 或 http://localhost/info.php 或 http://127.0.0.1/info.php），而不是文件名 （/home/httpd/info.php)
您应该看到一个长方形的信息关于你的新的 PHP 安装消息 Congratulations!


Apache 配置 PHP

Apache 使用 httpd.conf 文件进行全局设置， .htaccess 文件对每个目录进行访问设置。老版本的 Apache 把 httpd.conf 拆成三个文件 (access.conf、 httpd.conf，和 srm.conf），有些用户仍青睐于此。

Apache 服务器功能非常强大，但配置系统稍复杂。了解更多点击这里：

下一节讲述 httpd.conf 的独特设置对 PHP 的直接影响并且不能设置到其他位置。如果您进行标准安装，这时httpd.conf 会安装在以下位置 /etc/httpd/conf。

Timeout
这个值设置默认的秒数之前任何 HTTP 请求将会超时。如果您设置 PHP.ini 里面的参数 max_execution_time 超过这个值，PHP 将继续保持原状，但用户可能看到一个 404 错误。在安全模式下，该值将被忽略；您必须使用 PHP.ini 里面的参数 timeout 的超时值所代替。

DocumentRoot
DocumentRoot 为所有 HTTP 服务器进程指定根目录。在 UNIX 上它看起来像这样:

    DocumentRoot ./usr/local/apache_1.3.6/htdocs.
你可以选择任何文档作为根目录

AddType
PHP MIME 类型需要在这里设置要解析的 PHP 文件。请记住你可以关联 PHP 任何扩展文件像 .php3、.php5 或.htm。

    AddType application/x-httpd-php .php
    AddType application/x-httpd-phps .phps
    AddType application/x-httpd-php3 .php3 .phtml
    AddType application/x-httpd-php .html
Action
您必须取消注释这一行的 Apache 上的共享对象支持的 Windows Apxs 模块版本：

    LoadModule php4_module modules/php4apache.dll
或在 UNIX 上的共享对象支持：

    LoadModule php4_module modules/mod_php.so
AddModule
您必须取消注释 Apache 静态模块版本。

    AddModule mod_php4.c



PHP.INI 文件配置

PHP 配置文件 php.ini，它是最终并且是最直接影响 PHP 功能的配置文件。每次 PHP 初始化都要读取 php.ini 文件。换句话说，只要模块版本执行 CGI 版本或与每个脚本执行 CGI 版本，httpd 都要重启。如果你的设置没有显示在 phpinfo()中记得要停止并重新启动 httpd。如果它仍然无法显示，使用 phpinfo () 检查 php.ini 文件的路径。

配置文件被很好的注释和配置。键是区分大小写的，关键字的值则不区分大小写 ；忽略空白处和分号开头行。用1/0, Yes/No, On/off 或 true/false 表示布尔值。在 php.ini-Dist 文件中，默认值有助于 PHP 顺利安装，默认值可稍后调整。

在这里我们解释下 php.ini 文件重要设置，它需要 PHP 解析器。

Short_open_tag = Off
短标记看起来像这样： <? ?>。如果您想要使用 XML 功能,此选项必须设置关闭。

safe_mode = Off
如果此设置为开时，你可能编译 PHP 为--enable-safe-mode标志。安全模式与 CGI 使用最相关。详见这一章前一部分"CGI compile-time options"一节。

safe_mode_exec_dir = [DIR]
此选项只有在安全模式开启时才会生效；它也可以在 UNIX 生成过程中与 --with-exec--dir 标志一起设置。在安全模式下 PHP 只是执行此目录之外的外部二进制文件。默认值为 /usr/local/bin。这与提供正常的 PHP/HTML 网页页面无关。

safe_mode_allowed_envvars = [PHP]
在安全模式下，用户设置此选项可以更改哪些环境变量，默认值是只为这些以"PHP_"前缀的变量。如果这项指令为空，则大多数变量都可变。

safe_mode_protected_env_vars = [LD_LIBRARY_PATH]
在安全模式下，用户设置此选项可以更改哪些环境变量，即使允许更改设置 safe_mode_allowed_env_vars。

disable_functions = [function1, function2...]
出于安全考虑 PHP4 新增配置和 PHP5 标准配置中使用了禁用选定功能。以前，这需要 PHP 手动编辑成 C 代码。文件系统、系统和网络功能可能是第一选择，因为通过 HTTP 写入允许文件和更改系统永远不是安全的。

max_execution_time = 30
此函数 set_time_limit() 不能在在安全模式下运行，所以这是安全模式下进行脚本超时的主要方式。在 Windows 系统中，你必须中止消耗最大内存，而不是时间。如果您使用 Apache，也可以使用 Apache timeout 设置超时，但这不适用站点上的非 PHP 文件。

error_reporting = E_ALL & ~E_NOTICE
除了提示外包含所有的错误默认值是 E_ALL & ~ E_notice。开发服务器一定要最低限度设置成默认值；生产服务器可以考虑设置成较小的值。

error_prepend_string = [""]
在书挡中，error_append_string，此设置允许将错误消息标记为与其他的文本不同的颜色，或者你想要的颜色。

warn_plus_overloading = Off
如果在字符串中使用 + 运算符,作为表单中的值，这个设置会发出一条警告。

variables_order = EGPCS
此配置设置将取代 gpc_order。现在都是随着 register_globals 被弃用。它设置不同变量的顺序：Environment, GET, POST, COOKIE, and SERVER (aka Built-in)。您或许可以更改此顺序。变量从左到右依次覆盖，而且，每次最右边那个优先级最高。这意味着如果你剩下默认设置，正巧使用相同名称的环境变量，POST 变量和 COOKIE 变量，这样的话 COOKIE 变量将会拥有该名称。其实，这不会经常发生的。

register_globals = Off
此设置允许您决定是否注册 EGPCS 变量为全局变量。现在处于关闭状态，并且 PHP4.2，此标志默认设置是关闭的。现在都改用超全局变量数组。在这本书中所有列出的主要代码都使用的超全局变量数组。

gpc_order = GPC
此设置 GPC 已弃用。

magic_quotes_gpc = On
此设置转义引号传入 GET/POST/COOKIE 数据。如果你使用很多自动提交表单或其他形式提交并显示窗体值，您可能需要设置此指令开或准备使用 addslashes() on string-type 数据。

magic_quotes_runtime = Off
此设置转义来自传入数据库和文本字符串的引号。当存储字符串和当返回值没有带斜杠时，请记住 SQL 添加斜杠在单引号和撇号前面。如果此设置为关，你又要输出 SQL 数据库中的字符串数据时请使用 stripslashes()。如果 magic_quotes_sybase 设置为 On，此必须处于关闭状态。

magic_quotes_sybase = Off
这个参数只在启用 magic_quotes_runtime 时才有意义。如果启用了 magic_quotes_sybase，所有来自外部资源的数据都将使用一个单引号而不是反斜线进行转义。如果数据来自 Sybase 数据库，这就非常有用，因为 Sybase 数据库的转义字符不是反斜线，而是非传统的单引号。

auto-prepend-file = [path/to/file]
如果指定路径，每个 PHP 文件的开头必须自动 include() 。包含路径设置适用。

auto-append-file = [path/to/file]
如果指定路径，每个 PHP 文件的结尾必须自动 include()。除非你通过使用 exit() 函数来避免。包含路径设置适用。

include_path = [DIR]
如果设置此值，你只要允许包含或需要这些目录中的文件即可。这些目录一般是你文档的根目录；如果在安全模式下运行，设置这些为强制执行。如此设置为包含您同一目录脚本中的文件。多个目录以冒号分隔：/usr/local/apache/htdocs:/usr/local/lib。

doc_root = [DIR]
如果使用 Apache，你应该已经在 httpd.conf 虚拟主机和此服务器设置了根目录。如果你使用安全模式或如果要在你站点部分启用 PHP，在此处设置此值（比如，仅在您网页根目录的一个子目录中）。

file_uploads = [on/off]
如果使用 PHP 脚本上传文件则打开此标志。

upload_tmp_dir = [DIR]
如果您明白 HTTP 上传的具体影响，请注释这条！

session.save-handler = files
除了在极少数情况下，请不要更改此设置。所以别管它。

ignore_user_abort = [On/Off]
设置客户端断开连接时是否中断脚本的执行

PHP 以命令行脚本执行时，当脚本终端结束，脚本不会被立即中止，除非设置 value 为 TRUE，否则脚本输出任意字符时会被中止。

此设置控制站点访问者点击关闭的原因。默认开启就意味着脚本持续运行到完成或超时。如果设置更改为关闭，该脚本将中止。此设置仅适用模块模式而不是 CGI 模式。

mysql.default_host = hostname
如果不指定任何其他主机时，服务器主机默认使用最初连接到的数据库服务器的主机。

mysql.default_user = username
如果未指定主机名，默认使用最初连接的服务器名。

mysql.default_password = password
如果不指定设置密码则默认使用最初连接到的服务器密码。




  




自动加载类

使用 spl_autoload_register() 来注册你的自动加载函数。

PHP 提供了若干方式来自动加载包含还未加载的类的文件。 老的方法是使用名为 autoload() 魔术全局函数。 然而你一次仅能定义一个 autoload() 函数，因此如果你的程序包含一个也使用了 __autoload() 函数的库，就会发生冲突。

处理这个问题的正确方法是唯一地命名你的自动加载函数，然后使用 spl_autoload_register() 函数来注册它。 该函数允许定义多个 autoload() 这样的函数，因此你不必担心其他代码的 autoload() 函数。

示例
<?php
// 首先，定义你的自动载入的函数
function MyAutoload($className){
    include_once($className . '.php');
}

// 然后注册它。
spl_autoload_register('MyAutoload');

// Try it out!
// 因为我们没包含一个定义有 MyClass 的文件，所以自动加载器会介入并包含 MyClass.php。
// 在本例中，假定在 MyClass.php 文件中定义了 MyClass 类。
$var = new MyClass();
?>



从性能角度来看单引号和双引号

其实并不重要。
已有很多人花费很多笔墨来讨论是使用单引号（'）还是双引号（"）来定义字符串。 单引号字符串不会被解析，因此放入字符串的任何东西都会以原样显示。 双引号字符串会被解析，字符串中的任何 PHP 变量都会被求值。 另外，转义字符如换行符 \n 和制表符 \t 在单引号字符串中不会被求值，但在双引号字符串中会被求值。

由于双引号字符串在程序运行时要求值，从而理论上使用单引号字符串能提高性能，因为 PHP 不会对单引号字符串求值。 这对于一定规模的应用来说也许确实如此，但对于现实中一般的应用来说， 区别非常小以至于根本不用在意。因此对于普通应用，你选择哪种字符串并不重要。 对于负载极其高的应用来说，是有点作用的。 根据你的应用的需要来做选择，但无论你选择什么，请保持一致。





define() vs. const

使用 define()，除非考虑到可读性、类常量、或关注微优化
习惯上，在 PHP 中是使用 define() 函数来定义常量。 但从某个时候开始，PHP 中也能够使用 const 关键字来声明常量了。 那么当定义常量时，该使用哪种方式呢？

答案在于这两种方法之间的区别。

define() 在执行期定义常量，而 const 在编译期定义常量。这样 const 就有轻微的速度优势， 但不值得考虑这个问题，除非你在构建大规模的软件。

define() 将常量放入全局作用域，虽然你可以在常量名中包含命名空间。 这意味着你不能使用 define() 定义类常量。

define() 允许你在常量名和常量值中使用表达式，而 const 则都不允许。 这使得 define() 更加灵活。

define() 可以在 if() 代码块中调用，但 const 不行。
示例
<?php
// 来看看这两种方法如何处理 namespaces
namespace MiddleEarth\Creatures\Dwarves;
const GIMLI_ID = 1;
define('MiddleEarth\Creatures\Elves\LEGOLAS_ID', 2);

echo(\MiddleEarth\Creatures\Dwarves\GIMLI_ID);  // 1
echo(\MiddleEarth\Creatures\Elves\LEGOLAS_ID);  // 2; 注意：我们使用了 define()

// Now let's declare some bit-shifted constants representing ways to enter Mordor.
define('TRANSPORT_METHOD_SNEAKING', 1 << 0); // OK!
const TRANSPORT_METHOD_WALKING = 1 << 1; //Compile error! const can't use expressions as values

// 接下来, 条件常量。
define('HOBBITS_FRODO_ID', 1);

if($isGoingToMordor){
    define('TRANSPORT_METHOD', TRANSPORT_METHOD_SNEAKING); // OK!
    const PARTY_LEADER_ID = HOBBITS_FRODO_ID // 编译错误: const 不能用于 if 块中
}

// 最后, 类常量
class OneRing{
    const MELTING_POINT_DEGREES = 1000000; // OK!
    define('SHOW_ELVISH_DEGREES', 200); // 编译错误: 在类内不能使用 define()
}
?>
小插曲：当我看到第一行的 MiddleEarth 还没有感觉到什么，再往下看到 Mordor 时，震惊了。OneRing，OneRing，OneRingggggg！

因为 define() 更加灵活，你应该使用它以避免一些令人头疼的事情，除非你明确地需要类常量。 使用 const 通常会产生更加可读的代码，但是以牺牲灵活性为代价的。

无论你选择哪一种，请保持一致。


 

配置 Web 服务器提供 PHP 服务

使用 PHP-FPM
有多种方式来配置一个 web 服务器以提供 PHP 服务。传统（并且糟糕的）的方式是使用 Apache 的 mod_php。Mod_php将PHP 绑定到 Apache 自身，但是 Apache 对于该模块功能的管理工作非常糟糕。一旦遇到较大的流量， 就会遭受严重的内存问题。

后来两个新的可选项很快流行起来：mod_fastcgi 和 mod_fcgid。 两者均保持一定数量的 PHP 执行进程， Apache 将请求发送到这些端口来处理 PHP 的执行。由于这些库限制了存活的 PHP 进程的数量， 从而大大减少了内存使用而没有影响性能。

一些聪明的人创建一个 fastcgi 的实现，专门为真正与 PHP 工作良好而设计，他们称之为 PHP-FPM。PHP 5.3.0 之前，为安装它， 你得跨越许多障碍，但幸运的是，PHP 5.3.3 的核心包含了 PHP-FPM，因此在 Ubuntu 12.04 上安装它非常方便。

如下示例是针对 Apache 2.2.22 的，但 PHP-FPM 也能用于其他 web 服务器如 Nginx。

安装 PHP-FPM 和 Apache
在 Ubuntu 12.04 上你可以使用如下命令安装 PHP-FPM 和 Apache：

user@localhost: sudo apt-get install apache2-mpm-worker
libapache2-mod-fastcgi php5-fpm
user@localhost: sudo a2enmod actions alias fastcgi
注意我们 必须 使用 apache2-mpm-worker，而不是 apache2-mpm-prefork 或 apache2-mpm-threaded。 接下来配置 Aapache 虚拟主机将 PHP 请求路由到 PHP-FPM 进程。将如下配置语句放入 Apache 配置文件（在 Ubuntu 12.04 上默认配置文件是 /etc/apache2/sites-available/default）。

<VirtualHost *:80>
    AddHandler php5-fcgi .php
    Action php5-fcgi /php5-fcgi
    Alias /php5-fcgi /usr/lib/cgi-bin/php5-fcgi
    FastCgiExternalServer /usr/lib/cgi-bin/php5-fcgi -host 127.0.0.1:9000 -idle-timeout 120 -pass-header Authorization
</VirtualHost>
最后，重启 Apache 和 FPM 进程：

user@localhost: sudo service apache2 restart && sudo service php5-fpm
restart




净化 HTML 输入和输出

对于简单的数据净化，使用 htmlentities() 函数, 复杂的数据净化则使用 HTML Purifier 库
经 HTML Purifier 4.4.0 测试
在任何 wbe 应用中展示用户输出时，首先对其进行“净化”去除任何潜在危险的 HTML 是非常必要的。 一个恶意的用户可以制作某些 HTML，若被你的 web 应用直接输出，对查看它的人来说会很危险。

虽然可以尝试使用正则表达式来净化 HTML，但不要这样做。HTML是一种复杂的语言，试图使用正则表达式来净化 HTML 几乎总是失败的。

你可能会找到建议你使用 strip_tags() 函数的观点。 虽然 strip_tags() 从技术上来说是安全的，但如果输入的不合法的 HTML（比如， 没有结束标签），它就成了一个「愚蠢」的函数，可能会去除比你期望的更多的内容。 由于非技术用户在通信中经常使用 < 和 > 字符，strip_tags() 也就不是一个好的选择了。

如果阅读了验证邮件地址一节， 你也许也会考虑使用 filter_var() 函数。 然而 filter_var() 函数在遇到断行时会出现问题， 并且需要不直观的配置以接近 htmlentities() 函数的效果， 因此也不是一个好的选择。

对于简单需求的净化
如果你的 web 应用仅需要完全地转义（因此可以无害地呈现，但不是完全去除） HTML， 则使用 PHP 的内建 htmlentities() 函数。 这个函数要比 HTML Purifier 快得多，因此它不对 HTML 做任何验证---仅转义所有东西。

htmlentities() 不同于类似功能的函数htmlspecialchars()， 它会编码所有适用的 HTML 实体，而不仅仅是一个小的子集。

示例
<?php
// Oh no!  The user has submitted malicious HTML, and we have to display it in our web app!
$evilHtml = '<div onclick="xss();">Mua-ha-ha!  Twiddling my evil mustache...</div>';

// Use the ENT_QUOTES flag to make sure both single and double quotes are escaped.
// Use the UTF-8 character encoding if you've stored the text as UTF-8 (as you should have).
// See the UTF-8 section in this document for more details.
$safeHtml = htmlentities($evilHtml, ENT_QUOTES, 'UTF-8');
// $safeHtml is now fully escaped HTML.  You can output $safeHtml to your users without fear!
?>
对于复杂需求的净化
对于很多 web 应用来说，简单地转义 HTML 是不够的。 你可能想完全去除任何HTML，或者允许一小部分子集的 HTML 存在。 若是如此，则使用 HTML Purifier 库。

HTML Purifier 是一个经过充分测试但效率比较低的库。 这就是为什么如果你的需求并不复杂就应使用 htmlentities()， 因为它的效率要快得多。

HTML Purifier 相比 strip_tags() 是有优势的， 因为它在净化 HTML 之前会对其校验。 这意味着如果用户输入无效 HTML，HTML Purifier 相比 strip_tags() 更能保留 HTML 的原意。 HTML Purifier 高度可定制，允许你为 HTML 的一个子集建立白名单来允许这个 HTML 子集的实体存在输出中。

但其缺点就是相当的慢，它要求一些设置，在一个共享主机的环境里可能是不可行的。 其文档通常也复杂而不易理解。 以下示例是一个基本的使用配置。 查看文档阅读 HTML Purifier 提供的更多更高级的特性。

示例
<?php
// Include the HTML Purifier library
require_once('htmlpurifier-4.4.0/HTMLPurifier.auto.php');

// Oh no!  The user has submitted malicious HTML, and we have to display it in our web app!
$evilHtml = '<div onclick="xss();">Mua-ha-ha!  Twiddling my evil mustache...</div>';

// Set up the HTML Purifier object with the default configuration.
$purifier = new HTMLPurifier(HTMLPurifier_Config::createDefault());

$safeHtml = $purifier->purify($evilHtml);
// $safeHtml is now sanitized.  You can output $safeHtml to your users without fear!
?>
陷阱
以错误的字符编码使用 htmlentities() 会造成意想不到的输出。 在调用该函数时始终确认指定了一种字符编码，并且该编码与将被净化的字符串的编码相匹配。 更多细节请查看 UTF-8 一节。

使用 htmlentities() 时，始终包含 ENT_QUOTES 和字符编码参数。 默认情况下，htmlentities() 不会对单引号编码。多愚蠢的默认做法！

HTML Purifier 对于复杂的 HTML 效率极其的低。可以考虑设置一个缓存方案如APC来保存经过净化的结果以备后用。


 
